// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.newland.beecode.domain;

import com.newland.beecode.domain.MarketingCatalog;
import java.util.List;
import java.util.Random;
import org.springframework.stereotype.Component;

privileged aspect MarketingCatalogDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MarketingCatalogDataOnDemand: @Component;
    
    private Random MarketingCatalogDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<MarketingCatalog> MarketingCatalogDataOnDemand.data;
    
    public MarketingCatalog MarketingCatalogDataOnDemand.getNewTransientMarketingCatalog(int index) {
        com.newland.beecode.domain.MarketingCatalog obj = new com.newland.beecode.domain.MarketingCatalog();
        java.lang.String catalogName = "catalogName_" + index;
        if (catalogName.length() > 32) {
            catalogName  = catalogName.substring(0, 32);
        }
        obj.setCatalogName(catalogName);
        obj.setCreateTime(new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime());
        obj.setUpdateTime(new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime());
        return obj;
    }
    
    public MarketingCatalog MarketingCatalogDataOnDemand.getSpecificMarketingCatalog(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        MarketingCatalog obj = data.get(index);
        return MarketingCatalog.findMarketingCatalog(obj.getId());
    }
    
    public MarketingCatalog MarketingCatalogDataOnDemand.getRandomMarketingCatalog() {
        init();
        MarketingCatalog obj = data.get(rnd.nextInt(data.size()));
        return MarketingCatalog.findMarketingCatalog(obj.getId());
    }
    
    public boolean MarketingCatalogDataOnDemand.modifyMarketingCatalog(MarketingCatalog obj) {
        return false;
    }
    
    public void MarketingCatalogDataOnDemand.init() {
        data = com.newland.beecode.domain.MarketingCatalog.findMarketingCatalogEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'MarketingCatalog' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<com.newland.beecode.domain.MarketingCatalog>();
        for (int i = 0; i < 10; i++) {
            com.newland.beecode.domain.MarketingCatalog obj = getNewTransientMarketingCatalog(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
